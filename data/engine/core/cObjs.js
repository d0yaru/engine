//------------------------------------------------------------------------------
class Objs
{
	// constructor(){}
	//
	// Буферы инициализации
	//
	// Инициализируем буферы, которые нам понадобятся. Для этой демонстрации мы просто
	// есть один объект - простой трехмерный куб.
	//
	initBuffers(gl)
	{
		//--------------------------------------------------------------------------
		// Создайте буфер для позиций вершин куба.
		const positionBuffer = gl.createBuffer();
		// Выберите позиционный буфер в качестве буфера для применения
		// операции, чтобы отсюда выйти.
		gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
		// Теперь создайте массив позиций для куба.
		const positions = [
			// // line
			// 0.0, 0.0,  0.0,// 0
			// 1.0, 0.0,  0.0,// 1
			// // triangle90
			// 1.0, 0.0,  0.0,// 2
			// 0.0, 0.0,  0.0,// 3
			// 0.0, 1.0,  0.0,// 4
			// // triangle
			// -0.5, 0.0,  0.0,//5
			// 0.0, 1.0,  0.0,// 6
			// 0.5, 0.0,  0.0,// 7
			// // square 6
			-0.5, -0.5,  0.0,// 8
			0.5, -0.5,  0.0,// 9
			0.5,  0.5,  0.0,// 10
			-0.5,  0.5,  0.0,// 11
			// // triangle90_3d
			// 0.0, 0.0,  0.5,// 12
			// 1.0, 0.0,  0.5,// 13
			// 0.0,  1.0,  0.5,// 14
			// 0.0,  1.0,  -0.5,// 15
			// 0.0,  0.0,  -0.5,// 16
			// 1.0,  0.0,  -0.5,// 17
			// 0.0,  1.0,  -0.5,// 18
			// 1.0,  0.0,  0.5,// 19
			// 0.0,  0.0,  0.0,// 15
			// 0.0,  0.0,  0.0,// 16
			// 0.0,  0.0,  0.0,// 17
			// // cube 36
			// // Front face
			// -0.5, -0.5,  0.5,
			// 0.5, -0.5,  0.5,
			// 0.5,  0.5,  0.5,
			// -0.5,  0.5,  0.5,
			// // Back face
			// -0.5, -0.5, -0.5,
			// -0.5,  0.5, -0.5,
			// 0.5,  0.5, -0.5,
			// 0.5, -0.5, -0.5,
			// // Top face
			// -0.5,  0.5, -0.5,
			// -0.5,  0.5,  0.5,
			// 0.5,  0.5,  0.5,
			// 0.5,  0.5, -0.5,
			// // Bottom face
			// -0.5, -0.5, -0.5,
			// 0.5, -0.5, -0.5,
			// 0.5, -0.5,  0.5,
			// -0.5, -0.5,  0.5,
			// // Right face
			// 0.5, -0.5, -0.5,
			// 0.5,  0.5, -0.5,
			// 0.5,  0.5,  0.5,
			// 0.5, -0.5,  0.5,
			// // Left face
			// -0.5, -0.5, -0.5,
			// -0.5, -0.5,  0.5,
			// -0.5,  0.5,  0.5,
			// -0.5,  0.5, -0.5,
		];
		// Теперь передайте список позиций в WebGL, чтобы создать
		// форма. Мы делаем это, создавая Float32Array из
		// Массив JavaScript, затем используйте его для заполнения текущего буфера.

		gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);
		//--------------------------------------------------------------------------
		// // xColour 1
		// // Теперь настройте цвета для граней. Мы будем использовать однотонные цвета
		// // для каждого лица.

		// const faceColors = [
		// 	[1.0,  1.0,  1.0,  1.0],    // Front face: white
		// 	[1.0,  0.0,  0.0,  1.0],    // Back face: red
		// 	[0.0,  1.0,  0.0,  1.0],    // Top face: green
		// 	[0.0,  0.0,  1.0,  1.0],    // Bottom face: blue
		// 	[1.0,  1.0,  0.0,  1.0],    // Right face: yellow
		// 	[1.0,  0.0,  1.0,  1.0],    // Left face: purple
		// ];

		// // Преобразуйте массив цветов в таблицу для всех вершин.

		// var colors = [];

		// for (var j = 0; j < faceColors.length; ++j) {
		// 	const c = faceColors[j];

		// 	// Повторите каждый цвет четыре раза для четырех вершин грани
		// 	colors = colors.concat(c, c, c, c);
		// }

		// const colorBuffer = gl.createBuffer();
		// gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
		// gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
		//--------------------------------------------------------------------------
		// Установите нормали для вершин, чтобы мы могли вычислить освещение.
		const normalBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);

		const vertexNormals = [
			// line
			// 0.0,  0.0,  1.0,// 0
			// 0.0,  0.0,  1.0,// 1
			// // triangle90
			// 0.0,  0.0,  1.0,// 2
			// 0.0,  0.0,  1.0,// 3
			// 0.0,  0.0,  1.0,// 4
			// // triangle
			// 0.0,  0.0,  1.0,// 5
			// 0.0,  0.0,  1.0,// 6
			// 0.0,  0.0,  1.0,// 7
			// // square
			0.0,  0.0,  1.0,// 8
			0.0,  0.0,  1.0,// 9
			0.0,  0.0,  1.0,// 10
			0.0,  0.0,  1.0,// 11
			
			// // cube
			// // Front
			// 0.0,  0.0,  1.0,
			// 0.0,  0.0,  1.0,
			// 0.0,  0.0,  1.0,
			// 0.0,  0.0,  1.0,
			// // Назад
			// 0.0,  0.0, -1.0,
			// 0.0,  0.0, -1.0,
			// 0.0,  0.0, -1.0,
			// 0.0,  0.0, -1.0,
			// // Верхний
			// 0.0,  1.0,  0.0,
			// 0.0,  1.0,  0.0,
			// 0.0,  1.0,  0.0,
			// 0.0,  1.0,  0.0,
			// // Нижний
			// 0.0, -1.0,  0.0,
			// 0.0, -1.0,  0.0,
			// 0.0, -1.0,  0.0,
			// 0.0, -1.0,  0.0,
			// // Справа
			// 1.0,  0.0,  0.0,
			// 1.0,  0.0,  0.0,
			// 1.0,  0.0,  0.0,
			// 1.0,  0.0,  0.0,
			// // Слева
			// -1.0,  0.0,  0.0,
			// -1.0,  0.0,  0.0,
			// -1.0,  0.0,  0.0,
			// -1.0,  0.0,  0.0
		];
		
		gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexNormals), gl.STATIC_DRAW);
		//--------------------------------------------------------------------------
		// Теперь установите текстурные координаты для граней.
		const textureCoordBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, textureCoordBuffer);

		const textureCoordinates = [
			// // line
			// 0.0,  0.0,// 0
			// 0.0,  0.0,// 1
			// // triangle90
			// 0.0,  0.0,// 2
			// 1.0,  0.0,// 3
			// 1.0,  1.0,// 4
			// // triangle
			// 0.0,  0.0,// 5
			// 1.0,  0.0,// 6
			// 1.0,  1.0,// 7
			// // square
			// 0.0,  0.0,// 8
			// 1.0,  0.0,// 9
			// 1.0,  1.0,// 10
			// 0.0,  1.0,// 11
			0.0,  1.0,// 8
			1.0,  1.0,// 9
			1.0,  0.0,// 10
			0.0,  0.0,// 11
			// // triangle90_3d
			// 0.0,  0.0,// 12
			// 1.0,  0.0,// 13
			// 1.0,  1.0,// 14
			// 1.0,  0.0,// 15
			// 1.0,  1.0,// 16
			// 0.0,  1.0,// 17
			// 1.0,  0.0,// 18
			// 1.0,  1.0,// 19
			// // cube
			// Front
			// 0.0,  0.0,
			// 1.0,  0.0,
			// 1.0,  1.0,
			// 0.0,  1.0,
			// // Back
			// 0.0,  0.0,
			// 1.0,  0.0,
			// 1.0,  1.0,
			// 0.0,  1.0,
			// // Top
			// 0.0,  0.0,
			// 1.0,  0.0,
			// 1.0,  1.0,
			// 0.0,  1.0,
			// // Bottom
			// 0.0,  0.0,
			// 1.0,  0.0,
			// 1.0,  1.0,
			// 0.0,  1.0,
			// // Right
			// 0.0,  0.0,
			// 1.0,  0.0,
			// 1.0,  1.0,
			// 0.0,  1.0,
			// // Left
			// 0.0,  0.0,
			// 1.0,  0.0,
			// 1.0,  1.0,
			// 0.0,  1.0,
		];

		gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates),gl.STATIC_DRAW);
		//--------------------------------------------------------------------------
		// Создайте буфер массива элементов; это определяет индексы
		// в массивы вершин для вершин каждой грани.
		const indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);

		// Этот массив определяет каждую грань как два треугольника, используя
		// индексирует массив вершин, чтобы указать размер каждого треугольника
		// позиция.

		const indices = [
			// // line
			// 0,  1,
			// // triangle90
			// 2,  3, 4,
			// // triangle
			// 5,  6, 7,
			// // square
			0,  1,  2,      0,  2,  3,
			// // cube
			// 0,  1,  2,      0,  2,  3,	// front
			// 4,  5,  6,      4,  6,  7,	// back
			// 8,  9,  10,     8,  10, 11,	// top
			// 12, 13, 14,     12, 14, 15,	// bottom
			// 16, 17, 18,     16, 18, 19,	// right
			// 20, 21, 22,     20, 22, 23,	// left
		];
		
		// Теперь отправьте массив элементов в GL
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(indices), gl.STATIC_DRAW);
		//--------------------------------------------------------------------------
		return {
			position: positionBuffer,
			indices: indexBuffer,
			// color: colorBuffer,// xColour 2
			normal: normalBuffer,// xLighting
			textureCoord: textureCoordBuffer,// xTexture 1
		};
		//--------------------------------------------------------------------------
	}
	//------------------------------------------------------------------------------
}
//------------------------------------------------------------------------------
